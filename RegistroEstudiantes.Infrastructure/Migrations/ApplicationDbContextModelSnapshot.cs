// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistroEstudiantes.Infrastructure.Data;

#nullable disable

namespace RegistroEstudiantes.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Estudiante_Email");

                    b.ToTable("Estudiantes", (string)null);
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInscripcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.HasIndex("EstudianteId", "MateriaId")
                        .IsUnique()
                        .HasDatabaseName("IX_Inscripcion_Estudiante_Materia");

                    b.ToTable("Inscripciones", (string)null);
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Creditos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfesorId");

                    b.ToTable("Materias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creditos = 3,
                            Descripcion = "Introducción al cálculo diferencial e integral",
                            Nombre = "Cálculo I",
                            ProfesorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Creditos = 3,
                            Descripcion = "Estudio de vectores, matrices y transformaciones lineales",
                            Nombre = "Álgebra Lineal",
                            ProfesorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Creditos = 3,
                            Descripcion = "Mecánica clásica y termodinámica",
                            Nombre = "Física I",
                            ProfesorId = 2
                        },
                        new
                        {
                            Id = 4,
                            Creditos = 3,
                            Descripcion = "Fundamentos de química inorgánica y orgánica",
                            Nombre = "Química General",
                            ProfesorId = 2
                        },
                        new
                        {
                            Id = 5,
                            Creditos = 3,
                            Descripcion = "Fundamentos de programación en C#",
                            Nombre = "Programación I",
                            ProfesorId = 3
                        },
                        new
                        {
                            Id = 6,
                            Creditos = 3,
                            Descripcion = "Algoritmos y estructuras de datos fundamentales",
                            Nombre = "Estructuras de Datos",
                            ProfesorId = 3
                        },
                        new
                        {
                            Id = 7,
                            Creditos = 3,
                            Descripcion = "Introducción al pensamiento filosófico",
                            Nombre = "Filosofía",
                            ProfesorId = 4
                        },
                        new
                        {
                            Id = 8,
                            Creditos = 3,
                            Descripcion = "Principios éticos en el ejercicio profesional",
                            Nombre = "Ética Profesional",
                            ProfesorId = 4
                        },
                        new
                        {
                            Id = 9,
                            Creditos = 3,
                            Descripcion = "Diseño e implementación de bases de datos relacionales",
                            Nombre = "Base de Datos",
                            ProfesorId = 5
                        },
                        new
                        {
                            Id = 10,
                            Creditos = 3,
                            Descripcion = "Fundamentos de redes y protocolos de comunicación",
                            Nombre = "Redes de Computadoras",
                            ProfesorId = 5
                        });
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Profesor_Email");

                    b.ToTable("Profesores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Rodriguez",
                            Email = "carlos.rodriguez@universidad.edu",
                            Especialidad = "Matemáticas",
                            Nombre = "Carlos"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "González",
                            Email = "maria.gonzalez@universidad.edu",
                            Especialidad = "Ciencias",
                            Nombre = "María"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Pérez",
                            Email = "juan.perez@universidad.edu",
                            Especialidad = "Ingeniería",
                            Nombre = "Juan"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "López",
                            Email = "ana.lopez@universidad.edu",
                            Especialidad = "Humanidades",
                            Nombre = "Ana"
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "Martínez",
                            Email = "luis.martinez@universidad.edu",
                            Especialidad = "Tecnología",
                            Nombre = "Luis"
                        });
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Inscripcion", b =>
                {
                    b.HasOne("RegistroEstudiantes.Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistroEstudiantes.Domain.Entities.Materia", "Materia")
                        .WithMany("Inscripciones")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Materia", b =>
                {
                    b.HasOne("RegistroEstudiantes.Domain.Entities.Profesor", "Profesor")
                        .WithMany("Materias")
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Estudiante", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Materia", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("RegistroEstudiantes.Domain.Entities.Profesor", b =>
                {
                    b.Navigation("Materias");
                });
#pragma warning restore 612, 618
        }
    }
}
